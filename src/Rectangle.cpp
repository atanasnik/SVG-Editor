#include "Rectangle.h"
#include <iostream>
#include "Circle.h"
Rectangle::Rectangle(double x, double y, double width, double height, const String& appearance) : Shape(4), width(width), height(height)
{
	/*
		The rectangle is being generated by its lower left point, so every other point's coordinates
		are a sum of the coordinates of the initial point and the width/length, depending on the orientation. 
	*/
	setPoint(0, x, y);
	setPoint(1, x, y + height);
	setPoint(2, x + width, y + height);
	setPoint(3, x + width, y);

	color = appearance;
}

double Rectangle::getArea() const
{
	return width * height;
}

double Rectangle::getPerimeter() const
{
	return 2 * width + 2 * height;
}

bool Rectangle::includesPoint(double x, double y) const
{
	point p(x, y);

	return p.x >= getPointByIndex(0).x && p.x <= getPointByIndex(2).x
		&& p.y >= getPointByIndex(0).y && p.y <= getPointByIndex(2).y;
}

Shape* Rectangle::clone() const
{
	return new Rectangle(*this);
}

void Rectangle::print() const
{
	std::cout << "rectangle "
		<< getPointByIndex(0).x << " "
		<< getPointByIndex(0).y << " "
		<< width << " " << height << " "
		<< color << std::endl;
}

void Rectangle::translate(double y, double x)
{
	for (size_t i = 0; i < 4; ++i)
		setPoint(i, getPointByIndex(i).x + x, getPointByIndex(i).y + y);
}

const double Rectangle::getWidth() const
{
	return width;
}

const double Rectangle::getHeight() const
{
	return height;
}

bool Rectangle::isWithinRectangle(const double& x, const double& y, const double& width, const double& height) const
{
	Rectangle temp(x, y, width, height, "");
	return
		temp.includesPoint(getPointByIndex(0).x, getPointByIndex(0).y)
		&&
		temp.includesPoint(getPointByIndex(1).x, getPointByIndex(1).y)
		&&
		temp.includesPoint(getPointByIndex(2).x, getPointByIndex(2).y)
		&&
		temp.includesPoint(getPointByIndex(3).x, getPointByIndex(3).y);
}

bool Rectangle::isWithinCircle(const double& x, const double& y, const double& radius) const
{
	Circle temp(x, y, radius, "");
	return
		temp.includesPoint(getPointByIndex(0).x, getPointByIndex(0).y)
		&&
		temp.includesPoint(getPointByIndex(1).x, getPointByIndex(1).y)
		&&
		temp.includesPoint(getPointByIndex(2).x, getPointByIndex(2).y)
		&&
		temp.includesPoint(getPointByIndex(3).x, getPointByIndex(3).y);
}

void Rectangle::writeSVGline(std::ofstream& out) const
{
	String toSave = " <rect x=\"";
	out << toSave;
	out << getPointByIndex(0).x;
	toSave = "\" y=\"";
	out << toSave;
	out << getPointByIndex(0).y;
	toSave = "\" width=\"";
	out << toSave;
	out << width;
	toSave = "\" height=\"";
	out << toSave;
	out << height;
	toSave = "\" fill=\"";
	toSave += color;
	toSave += "\" />";

	out << toSave;
	out << '\n';
}

void Rectangle::erasedMessage() const
{
	std::cout << "Erased a rectangle";
}
